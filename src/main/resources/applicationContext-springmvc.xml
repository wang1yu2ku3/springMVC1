<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:lang="http://www.springframework.org/schema/lang" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">
	<!-- 1.打开Spring MVC框架的通过注解方式自动配置Controller,自动扫描com.vianet.sceportal.web.controller包, 
		并且把视图返回给html页面 -->
	<!-- 默认的注解映射的支持 -->
	<mvc:annotation-driven />

	<context:component-scan base-package="com.wyl.test" />

	<!-- 表示当访问主页时自动转发到index控制器 -->
	<!-- <mvc:view-controller path="/" view-name="forward:/index" /> -->
	<!-- 开启@Controller注解支持,此处只应该加载表现层组件,如果此处还加载dao层或service层的bean会将之前spring容器 
		加载的替换掉,而且此处不会进行AOP织入 -->
	<context:component-scan base-package="com.wyl.test.controller">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 2.对静态资源文件的访问,防止controller返回视图给html页面的时候又被作为controller去处理 -->
	<mvc:default-servlet-handler />

	<!-- 3.指定拦截器链: 各个拦截器的先后拦截顺序按拦截器链中的拦截器先后顺序执行拦截请求 , 如果异常了,最后会进入第一个拦截器的afterCompletion方法 -->
	<!-- <mvc:interceptors> <bean class="com.vianet.sceportal.web.interceptor.AuthInterceptor"/> 
		<bean class="com.vianet.sceportal.web.interceptor.SceportalAnalysisInterceptor"/> 
		<bean class="com.vianet.sceportal.web.interceptor.SceportalLocaleChangeInterceptor"/> 
		</mvc:interceptors> -->

	<!-- 4.配置视图解析器 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/" />
		<property name="suffix" value=".html" />
	</bean>
	<!-- 对系统配置json -->
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<!-- 告诉视图解析器，返回的类型为json格式 -->
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="html" value="text/html" />
				<entry key="xml" value="application/xml" />
			</map>
		</property>
		<!-- 配置默认返回的json, 将ModelAndView里的数据转换成JSON返回给客户端 -->
		<property name="defaultViews">
			<list>
				<!-- <bean class="com.wyl.test.util.SceportalMappingJacksonJsonView" 
					/> -->
				<!-- <bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" 
					/> -->
			</list>
		</property>
	</bean>

	<mvc:resources mapping="*.css" location="/" />
	<mvc:resources mapping="*.js" location="/" />
	<mvc:resources mapping="*.png" location="/" />

	<!-- 5.上传文件bean,文件最大上传为1024MB -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8" />
		<property name="maxUploadSize" value="1073741824" />
		<property name="maxInMemorySize" value="40960" />
	</bean>

	<!-- 6.配置国际化文件,国际化属性文件为messages_zh_CN.properties和messages_en_US.properties,使用 
		ReloadableResourceBundleMessageSource的好处是在线上环境直接修改国际化属性文件,定时刷新资源文件 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="defaultEncoding" value="utf-8" />
		<!-- <property name="basename" value="classpath:messages" /> -->
		<!-- 10分钟刷新一次资源国际化文件 -->
		<property name="cacheSeconds" value="600" />
		<property name="fallbackToSystemLocale" value="false" />
	</bean>

	<!-- 7.为MessageSourceHelper注入messageSource -->
	<!-- <bean id="messageSourceHelper" class="com.vianet.sceportal.web.util.MessageSourceHelper"> 
		<property name="messageSource" ref="messageSource"/> </bean> -->

	<!-- 加入Aspectj配置 -->
	<aop:aspectj-autoproxy />
	<!-- <bean id="logAspectClass" class="com.vianet.sceportal.web.interceptor.LogAspect"></bean> -->
	<!-- <aop:config proxy-target-class="true" /> -->
	<!-- <aop:aspectj-autoproxy proxy-target-class="true" /> -->
	<!-- <aop:config> -->
	<!-- <aop:aspect id="logAspect" ref="logAspectClass"> -->
	<!-- <aop:pointcut expression="execution(* com.vianet.sceportal.web.controller.*.*(..))" -->
	<!-- id="logPointCut" /> -->
	<!-- <aop:after-returning method="insertOperationLog" pointcut-ref="logPointCut" 
		/> -->
	<!-- </aop:aspect> -->
	<!-- </aop:config> -->


	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>

	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>apolication/json; charset=utf-8</value>
				<value>text/html;charset=utf-8</value>
			</list>
		</property>
	</bean>
	
	<bean id="logAspectBean" class="com.wyl.test.aop.LogAspect" />
	
	<!-- <aop:config>
		<aop:aspect id="logAspect" ref="logAspectBean">
			配置com.wyl.test.service包下所有类或接口的所有方法  
            <aop:pointcut id="businessService" expression="execution(* com.wyl.test.service.*.*(..))" />  
            <aop:before pointcut-ref="businessService" method="doBefore"/>  
            <aop:after pointcut-ref="businessService" method="doAfter"/>  
            <aop:around pointcut-ref="businessService" method="doAround"/>  
            <aop:after-throwing pointcut-ref="businessService" method="doThrowing" throwing="ex"/>
		</aop:aspect>
	</aop:config> -->
	
</beans>